$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 : clock $end
  $var wire 1 ; reset $end
  $scope module Flow $end
   $var wire 1 : clock $end
   $var wire 1 ; reset $end
   $scope module alu $end
    $var wire 4 < control_op [3:0] $end
    $var wire 2 # control_srcASelect [1:0] $end
    $var wire 3 $ control_srcBSelect [2:0] $end
    $var wire 32 % in_a_0 [31:0] $end
    $var wire 32 = in_a_1 [31:0] $end
    $var wire 32 & in_b_0 [31:0] $end
    $var wire 32 ' in_b_1 [31:0] $end
    $var wire 32 ( in_b_2 [31:0] $end
    $var wire 32 ) in_b_3 [31:0] $end
    $var wire 32 * in_b_4 [31:0] $end
    $var wire 32 + in_b_5 [31:0] $end
    $var wire 1 , out_eq $end
    $var wire 32 > out_result [31:0] $end
    $var wire 95 - sll [94:0] $end
   $upscope $end
   $scope module control $end
    $var wire 32 0 inst [31:0] $end
    $var wire 1 ? reg_writeEnable $end
    $var wire 2 1 reg_writeSelect [1:0] $end
    $var wire 1 2 pc_srcSelect $end
    $var wire 4 < alu_op [3:0] $end
    $var wire 2 # alu_srcASelect [1:0] $end
    $var wire 3 $ alu_srcBSelect [2:0] $end
    $var wire 4 3 ram_writeMask [3:0] $end
    $var wire 1 c ram_writeEnable $end
    $var wire 30 4 out_invInputs [29:0] $end
    $var wire 21 5 out [20:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 1 : clock $end
    $var wire 1 ; reset $end
    $var wire 1 2 control_srcSelect $end
    $var wire 32 > in_exeOut [31:0] $end
    $var wire 32 @ out [31:0] $end
    $var wire 32 = pc_reg [31:0] $end
   $upscope $end
   $scope module ram $end
    $var wire 1 c writeEnable $end
    $var wire 1 d valid $end
    $var wire 32 > writeAddr [31:0] $end
    $var wire 32 & writeData [31:0] $end
    $var wire 4 3 writeMask [3:0] $end
    $var wire 32 > readAddr [31:0] $end
    $var wire 32 6 readData [31:0] $end
    $var wire 32 = pc [31:0] $end
    $var wire 32 0 inst [31:0] $end
   $upscope $end
   $scope module reg_0 $end
    $var wire 1 : clock $end
    $var wire 1 ; reset $end
    $var wire 1 A control_writeEnable $end
    $var wire 2 1 control_writeSelect [1:0] $end
    $var wire 5 7 in_writeAddr [4:0] $end
    $var wire 32 > in_writeData_0 [31:0] $end
    $var wire 32 6 in_writeData_1 [31:0] $end
    $var wire 32 B in_writeData_2 [31:0] $end
    $var wire 5 8 in_rs_0 [4:0] $end
    $var wire 5 9 in_rs_1 [4:0] $end
    $var wire 32 % out_src_0 [31:0] $end
    $var wire 32 & out_src_1 [31:0] $end
    $var wire 32 C regFile_0 [31:0] $end
    $var wire 32 D regFile_1 [31:0] $end
    $var wire 32 E regFile_2 [31:0] $end
    $var wire 32 F regFile_3 [31:0] $end
    $var wire 32 G regFile_4 [31:0] $end
    $var wire 32 H regFile_5 [31:0] $end
    $var wire 32 I regFile_6 [31:0] $end
    $var wire 32 J regFile_7 [31:0] $end
    $var wire 32 K regFile_8 [31:0] $end
    $var wire 32 L regFile_9 [31:0] $end
    $var wire 32 M regFile_10 [31:0] $end
    $var wire 32 N regFile_11 [31:0] $end
    $var wire 32 O regFile_12 [31:0] $end
    $var wire 32 P regFile_13 [31:0] $end
    $var wire 32 Q regFile_14 [31:0] $end
    $var wire 32 R regFile_15 [31:0] $end
    $var wire 32 S regFile_16 [31:0] $end
    $var wire 32 T regFile_17 [31:0] $end
    $var wire 32 U regFile_18 [31:0] $end
    $var wire 32 V regFile_19 [31:0] $end
    $var wire 32 W regFile_20 [31:0] $end
    $var wire 32 X regFile_21 [31:0] $end
    $var wire 32 Y regFile_22 [31:0] $end
    $var wire 32 Z regFile_23 [31:0] $end
    $var wire 32 [ regFile_24 [31:0] $end
    $var wire 32 \ regFile_25 [31:0] $end
    $var wire 32 ] regFile_26 [31:0] $end
    $var wire 32 ^ regFile_27 [31:0] $end
    $var wire 32 _ regFile_28 [31:0] $end
    $var wire 32 ` regFile_29 [31:0] $end
    $var wire 32 a regFile_30 [31:0] $end
    $var wire 32 b regFile_31 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00 #
b001 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000001001 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
1,
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 -
b00000000000000000000010000010011 0
b00 1
02
b0000 3
b111111111111111111111011111011 4
b100000000000011000000 5
b00000000000000000000010000010011 6
b01000 7
b00000 8
b00000 9
1:
1;
b0000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
1?
b00000000000000000000000000000000 @
1A
b00000000000000000000000000000100 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
0c
1d
#1
0:
#2
1:
b10000000000000000000000000000000 =
b10000000000000000000000000000000 @
b10000000000000000000000000000100 B
#3
0:
#4
1:
#5
0:
#6
1:
#7
0:
#8
1:
#9
0:
