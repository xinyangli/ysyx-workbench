$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 8 clock $end
  $var wire 1 9 reset $end
  $scope module Flow $end
   $var wire 1 8 clock $end
   $var wire 1 9 reset $end
   $scope module alu $end
    $var wire 4 : control_op [3:0] $end
    $var wire 2 # control_srcASelect [1:0] $end
    $var wire 3 $ control_srcBSelect [2:0] $end
    $var wire 32 % in_a_0 [31:0] $end
    $var wire 32 ; in_a_1 [31:0] $end
    $var wire 32 & in_b_0 [31:0] $end
    $var wire 32 ' in_b_1 [31:0] $end
    $var wire 32 ( in_b_2 [31:0] $end
    $var wire 32 ) in_b_3 [31:0] $end
    $var wire 32 ( in_b_4 [31:0] $end
    $var wire 32 * in_b_5 [31:0] $end
    $var wire 32 < out_result [31:0] $end
    $var wire 95 = sll [94:0] $end
   $upscope $end
   $scope module control $end
    $var wire 32 + inst [31:0] $end
    $var wire 1 @ reg_writeEnable $end
    $var wire 2 , reg_writeSelect [1:0] $end
    $var wire 1 - pc_srcSelect $end
    $var wire 4 : alu_op [3:0] $end
    $var wire 2 # alu_srcASelect [1:0] $end
    $var wire 3 $ alu_srcBSelect [2:0] $end
    $var wire 1 . ram_valid $end
    $var wire 4 A ram_writeMask [3:0] $end
    $var wire 1 / ram_writeEnable $end
    $var wire 30 0 out_invInputs [29:0] $end
    $var wire 2 1 out_orMatrixOutputs_lo [1:0] $end
    $var wire 2 2 out_orMatrixOutputs_lo_hi_hi [1:0] $end
    $var wire 21 3 out [20:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 1 8 clock $end
    $var wire 1 9 reset $end
    $var wire 1 - control_srcSelect $end
    $var wire 32 < in_exeOut [31:0] $end
    $var wire 32 B out [31:0] $end
    $var wire 32 ; pc_reg [31:0] $end
   $upscope $end
   $scope module ram $end
    $var wire 1 8 clock $end
    $var wire 1 9 reset $end
    $var wire 1 / writeEnable $end
    $var wire 1 . valid $end
    $var wire 32 < writeAddr [31:0] $end
    $var wire 32 & writeData [31:0] $end
    $var wire 4 A writeMask [3:0] $end
    $var wire 32 < readAddr [31:0] $end
    $var wire 32 4 readData [31:0] $end
    $var wire 32 ; pc [31:0] $end
    $var wire 32 + inst [31:0] $end
   $upscope $end
   $scope module reg_0 $end
    $var wire 1 8 clock $end
    $var wire 1 9 reset $end
    $var wire 1 C control_writeEnable $end
    $var wire 2 , control_writeSelect [1:0] $end
    $var wire 5 5 in_writeAddr [4:0] $end
    $var wire 32 < in_writeData_0 [31:0] $end
    $var wire 32 4 in_writeData_1 [31:0] $end
    $var wire 32 D in_writeData_2 [31:0] $end
    $var wire 5 6 in_rs_0 [4:0] $end
    $var wire 5 7 in_rs_1 [4:0] $end
    $var wire 32 % out_src_0 [31:0] $end
    $var wire 32 & out_src_1 [31:0] $end
    $var wire 32 E regFile_0 [31:0] $end
    $var wire 32 F regFile_1 [31:0] $end
    $var wire 32 G regFile_2 [31:0] $end
    $var wire 32 H regFile_3 [31:0] $end
    $var wire 32 I regFile_4 [31:0] $end
    $var wire 32 J regFile_5 [31:0] $end
    $var wire 32 K regFile_6 [31:0] $end
    $var wire 32 L regFile_7 [31:0] $end
    $var wire 32 M regFile_8 [31:0] $end
    $var wire 32 N regFile_9 [31:0] $end
    $var wire 32 O regFile_10 [31:0] $end
    $var wire 32 P regFile_11 [31:0] $end
    $var wire 32 Q regFile_12 [31:0] $end
    $var wire 32 R regFile_13 [31:0] $end
    $var wire 32 S regFile_14 [31:0] $end
    $var wire 32 T regFile_15 [31:0] $end
    $var wire 32 U regFile_16 [31:0] $end
    $var wire 32 V regFile_17 [31:0] $end
    $var wire 32 W regFile_18 [31:0] $end
    $var wire 32 X regFile_19 [31:0] $end
    $var wire 32 Y regFile_20 [31:0] $end
    $var wire 32 Z regFile_21 [31:0] $end
    $var wire 32 [ regFile_22 [31:0] $end
    $var wire 32 \ regFile_23 [31:0] $end
    $var wire 32 ] regFile_24 [31:0] $end
    $var wire 32 ^ regFile_25 [31:0] $end
    $var wire 32 _ regFile_26 [31:0] $end
    $var wire 32 ` regFile_27 [31:0] $end
    $var wire 32 a regFile_28 [31:0] $end
    $var wire 32 b regFile_29 [31:0] $end
    $var wire 32 c regFile_30 [31:0] $end
    $var wire 32 d regFile_31 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00 #
b001 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000001001 )
b00000000000000000000000000000000 *
b00000000000000000000010000010011 +
b00 ,
0-
0.
0/
b111111111111111111111011111011 0
b00 1
b00 2
b100000000000011000000 3
b00000000000000000000000000000000 4
b01000 5
b00000 6
b00000 7
18
19
b0000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 =
1@
b0000 A
b00000000000000000000000000000000 B
1C
b00000000000000000000000000000100 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
#1
08
#2
18
b10000000000000000000000000000000 ;
b10000000000000000000000000000000 B
b10000000000000000000000000000100 D
#3
08
#4
18
#5
08
#6
18
#7
08
#8
18
#9
08
#10
b01 #
b101 $
b00000000000000001001000000000000 (
b00000000000000000000000000000011 )
b00000000000000001001000000000000 *
b00000000000000001001000100010111 +
b111111111111111101101110111010 0
b100000000011010000000 3
b00010 5
b00001 6
18
09
b10000000000000000000000000000100 ;
b10000000000000001001000000000100 <
b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000100 =
b10000000000000000000000000000100 B
b10000000000000000000000000001000 D
#11
08
#12
b00 #
b001 $
b10000000000000001001000000000100 %
b11111111111111111111111111111100 '
b11111111111100010000011111111100 (
b11111111111111111111011111100011 )
b11111111110000010000000000000000 *
b11111111110000010000000100010011 +
b000000000011111011111110111011 0
b100000000000011000000 3
b00010 6
b11100 7
18
b10000000000000000000000000001000 ;
b10000000000000001001000000000000 <
b00010000000000000001001000000000100000000000000000000000000000000000000000000000000000000000000 =
b10000000000000000000000000001000 B
b10000000000000000000000000001100 D
b10000000000000001001000000000100 G
#13
08
#14
b01 #
b010 $
b00000000000000000000000000000000 %
b00000000000000000000001011000100 '
b00000000000000000000001011000100 (
b00000000000000000000101011000001 )
b00101100010000000000000000000000 *
b00101100010000000000000011101111 +
b10 ,
1-
b110100111011111111111111000100 0
b01 2
b110010000010100000000 3
b00001 5
b00000 6
b00100 7
18
b10000000000000000000000000001100 ;
b10000000000000000000001011010000 <
b00000000000000000000000000000000000000000000000000000000000100000000000000000000000000011000000 =
b10000000000000000000000000001100 B
b10000000000000000000000000010000 D
b10000000000000001001000000000000 G
#15
08
#16
b10 #
b101 $
b11111111111111111111100000000000 '
b11111111111100000000000000000000 (
b11111111111111111111000000001011 )
b10000000000000000000000000000000 *
b10000000000000000000010100110111 +
b00 ,
0-
b011111111111111111111010110010 0
b00 2
b100000000101010000000 3
b01010 5
b00000 7
18
b10000000000000000000001011010000 ;
b10000000000000000000000000000000 <
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 =
b10000000000000000000001011010000 B
b10000000000000000000001011010100 D
b10000000000000000000000000010000 F
#17
08
#18
b00 #
b001 $
b10000000000000001001000000000000 %
b11111111111111111111111111110000 '
b11111111111100010000011111110000 (
b11111111111111111111011111100011 )
b11111111000000010000000000000000 *
b11111111000000010000000100010011 +
b000000001111111011111110111011 0
b100000000000011000000 3
b00010 5
b00010 6
b10000 7
18
b10000000000000000000001011010100 ;
b10000000000000001000111111110000 <
b00000000000000010000000000000001001000000000000000000000000000000000000000000000000000000000000 =
b10000000000000000000001011010100 B
b10000000000000000000001011011000 D
b10000000000000000000000000000000 O
#19
08
#20
b10000000000000000000000000000000 %
b00000000000000000000001011110000 '
b00000000000001010000001011110000 (
b00000000000000000000001011101011 )
b00101111000001010000000000000000 *
b00101111000001010000010100010011 +
b110100001111101011111010111011 0
b01010 5
b01010 6
18
b10000000000000000000001011011000 ;
b10000000000000000000001011110000 <
b00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000 =
b10000000000000000000001011011000 B
b10000000000000000000001011011100 D
b10000000000000001000111111110000 G
#21
08
#22
b100 $
b10000000000000001000111111110000 %
b10000000000000000000000000010000 &
b00000000000000000000000000000001 '
b00000000000000010010100000000000 (
b00000000000000000000000000001101 )
b00000000000100010010000000000000 *
b00000000000100010010011000100011 +
1.
1/
b111111111110111011011001110111 0
b10 1
b000000000001000111111 3
b10000000000000000000000000010000 4
b01100 5
b00010 6
b00001 7
18
b10000000000000000000001011011100 ;
b10000000000000011011011111110000 <
b00000000000000000000000000000000000000000000000000000000000000010000000000000001000111111110000 =
0@
b1111 A
b10000000000000000000001011011100 B
0C
b10000000000000000000001011100000 D
b10000000000000000000001011110000 O
#23
08
#24
b01 #
b010 $
b00000000000000000000000000000000 %
b11111111111111111111110101100001 '
b11111111111111111111110101100000 (
b11111111111111111111110101100001 )
b11010110000111111111000000000000 *
b11010110000111111111000011101111 +
b10 ,
1-
0.
0/
b001010011110000000001111000100 0
b00 1
b01 2
b110010000010100000000 3
b00000000000000000000000000000000 4
b00001 5
b11111 6
18
b10000000000000000000001011100000 ;
b10000000000000000000000001000000 <
b00000000000000000000000000000001000000000000000000000101110000000000000000000000000000000000000 =
1@
b0000 A
b10000000000000000000001011100000 B
1C
b10000000000000000000001011100100 D
#25
08
#26
b10 #
b101 $
b00000000000000000000000000000000 &
b11111111111111111111100000000000 '
b11111111111100000000000000000000 (
b11111111111111111111100000001101 )
b10000000000000000000000000000000 *
b10000000000000000000011010110111 +
b00 ,
0-
b011111111111111111111001010010 0
b00 2
b100000000101010000000 3
b01101 5
b00000 6
b00000 7
18
b10000000000000000000000001000000 ;
b10000000000000000000000000000000 <
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 =
b10000000000000000000000001000000 B
b10000000000000000000000001000100 D
b10000000000000000000001011100100 F
#27
08
