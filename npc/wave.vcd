$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 = clock $end
  $var wire 1 > reset $end
  $scope module Flow $end
   $var wire 1 = clock $end
   $var wire 1 > reset $end
   $scope module alu $end
    $var wire 4 # control_op [3:0] $end
    $var wire 2 $ control_srcASelect [1:0] $end
    $var wire 3 % control_srcBSelect [2:0] $end
    $var wire 32 & in_a_0 [31:0] $end
    $var wire 32 ' in_a_1 [31:0] $end
    $var wire 32 ( in_b_0 [31:0] $end
    $var wire 32 ) in_b_1 [31:0] $end
    $var wire 32 * in_b_2 [31:0] $end
    $var wire 32 + in_b_3 [31:0] $end
    $var wire 32 , in_b_4 [31:0] $end
    $var wire 32 - in_b_5 [31:0] $end
    $var wire 32 . out_result [31:0] $end
    $var wire 95 / sll [94:0] $end
   $upscope $end
   $scope module control $end
    $var wire 32 2 inst [31:0] $end
    $var wire 1 ? reg_writeEnable $end
    $var wire 2 3 reg_writeSelect [1:0] $end
    $var wire 1 4 pc_srcSelect $end
    $var wire 4 # alu_op [3:0] $end
    $var wire 2 $ alu_srcASelect [1:0] $end
    $var wire 3 % alu_srcBSelect [2:0] $end
    $var wire 4 5 ram_writeMask [3:0] $end
    $var wire 1 b ram_writeEnable $end
    $var wire 30 6 out_invInputs [29:0] $end
    $var wire 21 7 out [20:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 1 = clock $end
    $var wire 1 > reset $end
    $var wire 1 4 control_srcSelect $end
    $var wire 32 . in_exeOut [31:0] $end
    $var wire 32 @ out [31:0] $end
    $var wire 32 ' pc_reg [31:0] $end
   $upscope $end
   $scope module ram $end
    $var wire 1 = clock $end
    $var wire 1 > reset $end
    $var wire 1 b writeEnable $end
    $var wire 1 c valid $end
    $var wire 32 . writeAddr [31:0] $end
    $var wire 32 ( writeData [31:0] $end
    $var wire 4 5 writeMask [3:0] $end
    $var wire 32 . readAddr [31:0] $end
    $var wire 32 8 readData [31:0] $end
    $var wire 32 ' pc [31:0] $end
    $var wire 32 2 inst [31:0] $end
   $upscope $end
   $scope module reg_0 $end
    $var wire 1 = clock $end
    $var wire 1 > reset $end
    $var wire 1 A control_writeEnable $end
    $var wire 2 3 control_writeSelect [1:0] $end
    $var wire 5 9 in_writeAddr [4:0] $end
    $var wire 32 . in_writeData_0 [31:0] $end
    $var wire 32 8 in_writeData_1 [31:0] $end
    $var wire 32 : in_writeData_2 [31:0] $end
    $var wire 5 ; in_rs_0 [4:0] $end
    $var wire 5 < in_rs_1 [4:0] $end
    $var wire 32 & out_src_0 [31:0] $end
    $var wire 32 ( out_src_1 [31:0] $end
    $var wire 32 B regFile_0 [31:0] $end
    $var wire 32 C regFile_1 [31:0] $end
    $var wire 32 D regFile_2 [31:0] $end
    $var wire 32 E regFile_3 [31:0] $end
    $var wire 32 F regFile_4 [31:0] $end
    $var wire 32 G regFile_5 [31:0] $end
    $var wire 32 H regFile_6 [31:0] $end
    $var wire 32 I regFile_7 [31:0] $end
    $var wire 32 J regFile_8 [31:0] $end
    $var wire 32 K regFile_9 [31:0] $end
    $var wire 32 L regFile_10 [31:0] $end
    $var wire 32 M regFile_11 [31:0] $end
    $var wire 32 N regFile_12 [31:0] $end
    $var wire 32 O regFile_13 [31:0] $end
    $var wire 32 P regFile_14 [31:0] $end
    $var wire 32 Q regFile_15 [31:0] $end
    $var wire 32 R regFile_16 [31:0] $end
    $var wire 32 S regFile_17 [31:0] $end
    $var wire 32 T regFile_18 [31:0] $end
    $var wire 32 U regFile_19 [31:0] $end
    $var wire 32 V regFile_20 [31:0] $end
    $var wire 32 W regFile_21 [31:0] $end
    $var wire 32 X regFile_22 [31:0] $end
    $var wire 32 Y regFile_23 [31:0] $end
    $var wire 32 Z regFile_24 [31:0] $end
    $var wire 32 [ regFile_25 [31:0] $end
    $var wire 32 \ regFile_26 [31:0] $end
    $var wire 32 ] regFile_27 [31:0] $end
    $var wire 32 ^ regFile_28 [31:0] $end
    $var wire 32 _ regFile_29 [31:0] $end
    $var wire 32 ` regFile_30 [31:0] $end
    $var wire 32 a regFile_31 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b00 $
b000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 /
b00000000000000000000000000000000 2
b00 3
04
b0000 5
b111111111111111111111111111111 6
b000000000000000000000 7
b00000000000000000000000000000000 8
b00000 9
b00000000000000000000000000000100 :
b00000 ;
b00000 <
1=
1>
0?
b00000000000000000000000000000000 @
0A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
0b
1c
#1
0=
#2
b001 %
b10000000000000000000000000000000 '
b00000000000000000000000000001001 +
b00000000000000000000010000010011 2
b111111111111111111111011111011 6
b100000000000011000000 7
b00000000000000000000010000010011 8
b01000 9
b10000000000000000000000000000100 :
1=
1?
b10000000000000000000000000000000 @
1A
#3
0=
#4
1=
#5
0=
#6
1=
#7
0=
#8
1=
#9
0=
